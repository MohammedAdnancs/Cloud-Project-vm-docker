Cloud VM Manager Test Report
Generated: 2025-05-16 21:23:03
==================================================

test_create_disk_invalid_format (test_disk_manager.TestDiskManager.test_create_disk_invalid_format)
Test creating a disk with invalid format ... ok
test_create_disk_invalid_name (test_disk_manager.TestDiskManager.test_create_disk_invalid_name)
Test creating a disk with invalid name ... ok
test_create_disk_invalid_size (test_disk_manager.TestDiskManager.test_create_disk_invalid_size)
Test creating a disk with invalid size ... FAIL
test_create_disk_success (test_disk_manager.TestDiskManager.test_create_disk_success)
Test creating a disk with valid parameters ... FAIL
test_delete_disk (test_disk_manager.TestDiskManager.test_delete_disk)
Test deleting a disk ... ok
test_delete_nonexistent_disk (test_disk_manager.TestDiskManager.test_delete_nonexistent_disk)
Test deleting a disk that doesn't exist ... ok
test_get_disk_path (test_disk_manager.TestDiskManager.test_get_disk_path)
Test getting the path for a specific disk ... ok
test_list_disks (test_disk_manager.TestDiskManager.test_list_disks)
Test listing available disks ... ok
test_validate_registry (test_disk_manager.TestDiskManager.test_validate_registry)
Test registry validation functionality ... ok
test_create_vm_duplicate_name (test_vm_manager.TestVMManager.test_create_vm_duplicate_name)
Test creating a VM with a name that already exists ... ERROR
test_create_vm_invalid_cpus (test_vm_manager.TestVMManager.test_create_vm_invalid_cpus)
Test creating a VM with invalid CPU settings ... ERROR
test_create_vm_invalid_memory (test_vm_manager.TestVMManager.test_create_vm_invalid_memory)
Test creating a VM with invalid memory settings ... ERROR
test_create_vm_invalid_name (test_vm_manager.TestVMManager.test_create_vm_invalid_name)
Test creating a VM with invalid name ... ERROR
test_create_vm_nonexistent_disk (test_vm_manager.TestVMManager.test_create_vm_nonexistent_disk)
Test creating a VM with a disk that doesn't exist ... ERROR
test_create_vm_success (test_vm_manager.TestVMManager.test_create_vm_success)
Test creating a VM with valid parameters ... ERROR
test_create_vm_with_iso (test_vm_manager.TestVMManager.test_create_vm_with_iso)
Test creating a VM with an ISO file ... ERROR
test_delete_nonexistent_vm (test_vm_manager.TestVMManager.test_delete_nonexistent_vm)
Test deleting a VM that doesn't exist ... ERROR
test_delete_vm (test_vm_manager.TestVMManager.test_delete_vm)
Test deleting a VM ... ERROR
test_list_isos (test_vm_manager.TestVMManager.test_list_isos)
Test listing available ISO files ... ERROR
test_list_vms (test_vm_manager.TestVMManager.test_list_vms)
Test listing available VMs ... ERROR
test_start_nonexistent_vm (test_vm_manager.TestVMManager.test_start_nonexistent_vm)
Test starting a VM that doesn't exist ... ERROR
test_start_vm (test_vm_manager.TestVMManager.test_start_vm)
Test starting a VM ... ERROR
test_validate_registry (test_vm_manager.TestVMManager.test_validate_registry)
Test VM registry validation ... ERROR
test_build_image (test_docker_manager.TestDockerManager.test_build_image)
Test building a Docker image from a Dockerfile ... ok
test_create_dockerfile (test_docker_manager.TestDockerManager.test_create_dockerfile)
Test creating a standalone Dockerfile ... ok
test_create_dockerfile_project (test_docker_manager.TestDockerManager.test_create_dockerfile_project)
Test creating a Docker project with Dockerfile and other files ... ok
test_create_dockerfile_project_minimal (test_docker_manager.TestDockerManager.test_create_dockerfile_project_minimal)
Test creating a Docker project with only a Dockerfile ... ok
test_list_containers (test_docker_manager.TestDockerManager.test_list_containers)
Test listing Docker containers ... FAIL
test_list_images (test_docker_manager.TestDockerManager.test_list_images)
Test listing Docker images ... ok
test_remove_container (test_docker_manager.TestDockerManager.test_remove_container)
Test removing a Docker container ... FAIL
test_run_container (test_docker_manager.TestDockerManager.test_run_container)
Test running a Docker container ... FAIL
test_search_dockerhub (test_docker_manager.TestDockerManager.test_search_dockerhub)
Test searching for a Docker image on DockerHub ... FAIL
test_search_local_image (test_docker_manager.TestDockerManager.test_search_local_image)
Test searching for a local Docker image ... ok
test_start_container (test_docker_manager.TestDockerManager.test_start_container)
Test starting a Docker container ... FAIL
test_stop_container (test_docker_manager.TestDockerManager.test_stop_container)
Test stopping a Docker container ... FAIL
test_create_disk_then_vm (test_integration.TestDiskVMIntegration.test_create_disk_then_vm)
Test creating a disk and then using it to create a VM ... ERROR
test_create_disk_vm_and_start (test_integration.TestDiskVMIntegration.test_create_disk_vm_and_start)
Test creating a disk, creating a VM, and then starting it ... ERROR
test_delete_disk_used_by_vm (test_integration.TestDiskVMIntegration.test_delete_disk_used_by_vm)
Test that a disk used by a VM cannot be deleted ... ERROR
test_refreshed_disk_available_to_vm (test_integration.TestDiskVMIntegration.test_refreshed_disk_available_to_vm)
Test that newly created disks are recognized by the VM manager ... ERROR
test_vm_registry_sync_with_disk_registry (test_integration.TestDiskVMIntegration.test_vm_registry_sync_with_disk_registry)
Test that VM registry stays in sync with disk registry ... ERROR
test_create_dockerfile_build_run (test_integration.TestDockerIntegration.test_create_dockerfile_build_run)
Test creating a Dockerfile, building an image, and running a container ... ok

======================================================================
ERROR: test_create_vm_duplicate_name (test_vm_manager.TestVMManager.test_create_vm_duplicate_name)
Test creating a VM with a name that already exists
----------------------------------------------------------------------
Traceback (most recent call last):
  File "D:\git hub projects\cloud\test_disk_manager.py", line 66, in test_create_disk_invalid_size
    self.assertIn("Invalid size format", message)
    ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 'Invalid size format' not found in 'Disk size must be greater than zero'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\git hub projects\cloud\run_tests.py", line 59, in run_tests
    result = runner.run(test_suite)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\runner.py", line 72, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 84, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 122, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 84, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 122, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 707, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 650, in run
    with outcome.testPartExecutor(self):
         ~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^
  File "C:\Python313\Lib\contextlib.py", line 162, in __exit__
    self.gen.throw(value)
    ~~~~~~~~~~~~~~^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 75, in testPartExecutor
    _addError(self.result, test_case, exc_info)
    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 98, in _addError
    result.addFailure(test, exc_info)
    ~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\result.py", line 17, in inner
    return method(self, *args, **kw)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 205, in addFailure
    testinfo = self.infoclass(self, test, self.infoclass.FAILURE, err)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 90, in __init__
    else self.test_result._exc_info_to_string(
         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        self.err, test_method))
        ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 425, in _exc_info_to_string
    length = self._count_relevant_tb_levels(tb)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'HtmlTestResult' object has no attribute '_count_relevant_tb_levels'. Did you mean: '_is_relevant_tb_level'?

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\git hub projects\cloud\test_vm_manager.py", line 56, in setUp
    self.vm_manager = VMManager(vms_dir=self.test_vms_dir, isos_dir=self.test_isos_dir)
                      ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\git hub projects\cloud\services\vm_manager.py", line 30, in __init__
    self.disk_manager = DiskManager()
                        ~~~~~~~~~~~^^
  File "D:\git hub projects\cloud\services\disk_manager.py", line 27, in __init__
    self._load_registry()
    ~~~~~~~~~~~~~~~~~~~^^
  File "D:\git hub projects\cloud\services\disk_manager.py", line 46, in _load_registry
    self._validate_registry()
    ~~~~~~~~~~~~~~~~~~~~~~~^^
  File "D:\git hub projects\cloud\services\disk_manager.py", line 73, in _validate_registry
    info = json.loads(result.stdout)
  File "C:\Python313\Lib\json\__init__.py", line 339, in loads
    raise TypeError(f'the JSON object must be str, bytes or bytearray, '
                    f'not {s.__class__.__name__}')
TypeError: the JSON object must be str, bytes or bytearray, not MagicMock

======================================================================
ERROR: test_create_vm_invalid_cpus (test_vm_manager.TestVMManager.test_create_vm_invalid_cpus)
Test creating a VM with invalid CPU settings
----------------------------------------------------------------------
Traceback (most recent call last):
  File "D:\git hub projects\cloud\test_disk_manager.py", line 66, in test_create_disk_invalid_size
    self.assertIn("Invalid size format", message)
    ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 'Invalid size format' not found in 'Disk size must be greater than zero'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\git hub projects\cloud\run_tests.py", line 59, in run_tests
    result = runner.run(test_suite)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\runner.py", line 72, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 84, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 122, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 84, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 122, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 707, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 650, in run
    with outcome.testPartExecutor(self):
         ~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^
  File "C:\Python313\Lib\contextlib.py", line 162, in __exit__
    self.gen.throw(value)
    ~~~~~~~~~~~~~~^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 75, in testPartExecutor
    _addError(self.result, test_case, exc_info)
    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 98, in _addError
    result.addFailure(test, exc_info)
    ~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\result.py", line 17, in inner
    return method(self, *args, **kw)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 205, in addFailure
    testinfo = self.infoclass(self, test, self.infoclass.FAILURE, err)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 90, in __init__
    else self.test_result._exc_info_to_string(
         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        self.err, test_method))
        ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 425, in _exc_info_to_string
    length = self._count_relevant_tb_levels(tb)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'HtmlTestResult' object has no attribute '_count_relevant_tb_levels'. Did you mean: '_is_relevant_tb_level'?

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\git hub projects\cloud\test_vm_manager.py", line 56, in setUp
    self.vm_manager = VMManager(vms_dir=self.test_vms_dir, isos_dir=self.test_isos_dir)
                      ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\git hub projects\cloud\services\vm_manager.py", line 30, in __init__
    self.disk_manager = DiskManager()
                        ~~~~~~~~~~~^^
  File "D:\git hub projects\cloud\services\disk_manager.py", line 27, in __init__
    self._load_registry()
    ~~~~~~~~~~~~~~~~~~~^^
  File "D:\git hub projects\cloud\services\disk_manager.py", line 46, in _load_registry
    self._validate_registry()
    ~~~~~~~~~~~~~~~~~~~~~~~^^
  File "D:\git hub projects\cloud\services\disk_manager.py", line 73, in _validate_registry
    info = json.loads(result.stdout)
  File "C:\Python313\Lib\json\__init__.py", line 339, in loads
    raise TypeError(f'the JSON object must be str, bytes or bytearray, '
                    f'not {s.__class__.__name__}')
TypeError: the JSON object must be str, bytes or bytearray, not MagicMock

======================================================================
ERROR: test_create_vm_invalid_memory (test_vm_manager.TestVMManager.test_create_vm_invalid_memory)
Test creating a VM with invalid memory settings
----------------------------------------------------------------------
Traceback (most recent call last):
  File "D:\git hub projects\cloud\test_disk_manager.py", line 66, in test_create_disk_invalid_size
    self.assertIn("Invalid size format", message)
    ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 'Invalid size format' not found in 'Disk size must be greater than zero'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\git hub projects\cloud\run_tests.py", line 59, in run_tests
    result = runner.run(test_suite)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\runner.py", line 72, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 84, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 122, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 84, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 122, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 707, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 650, in run
    with outcome.testPartExecutor(self):
         ~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^
  File "C:\Python313\Lib\contextlib.py", line 162, in __exit__
    self.gen.throw(value)
    ~~~~~~~~~~~~~~^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 75, in testPartExecutor
    _addError(self.result, test_case, exc_info)
    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 98, in _addError
    result.addFailure(test, exc_info)
    ~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\result.py", line 17, in inner
    return method(self, *args, **kw)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 205, in addFailure
    testinfo = self.infoclass(self, test, self.infoclass.FAILURE, err)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 90, in __init__
    else self.test_result._exc_info_to_string(
         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        self.err, test_method))
        ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 425, in _exc_info_to_string
    length = self._count_relevant_tb_levels(tb)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'HtmlTestResult' object has no attribute '_count_relevant_tb_levels'. Did you mean: '_is_relevant_tb_level'?

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\git hub projects\cloud\test_vm_manager.py", line 56, in setUp
    self.vm_manager = VMManager(vms_dir=self.test_vms_dir, isos_dir=self.test_isos_dir)
                      ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\git hub projects\cloud\services\vm_manager.py", line 30, in __init__
    self.disk_manager = DiskManager()
                        ~~~~~~~~~~~^^
  File "D:\git hub projects\cloud\services\disk_manager.py", line 27, in __init__
    self._load_registry()
    ~~~~~~~~~~~~~~~~~~~^^
  File "D:\git hub projects\cloud\services\disk_manager.py", line 46, in _load_registry
    self._validate_registry()
    ~~~~~~~~~~~~~~~~~~~~~~~^^
  File "D:\git hub projects\cloud\services\disk_manager.py", line 73, in _validate_registry
    info = json.loads(result.stdout)
  File "C:\Python313\Lib\json\__init__.py", line 339, in loads
    raise TypeError(f'the JSON object must be str, bytes or bytearray, '
                    f'not {s.__class__.__name__}')
TypeError: the JSON object must be str, bytes or bytearray, not MagicMock

======================================================================
ERROR: test_create_vm_invalid_name (test_vm_manager.TestVMManager.test_create_vm_invalid_name)
Test creating a VM with invalid name
----------------------------------------------------------------------
Traceback (most recent call last):
  File "D:\git hub projects\cloud\test_disk_manager.py", line 66, in test_create_disk_invalid_size
    self.assertIn("Invalid size format", message)
    ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 'Invalid size format' not found in 'Disk size must be greater than zero'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\git hub projects\cloud\run_tests.py", line 59, in run_tests
    result = runner.run(test_suite)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\runner.py", line 72, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 84, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 122, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 84, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 122, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 707, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 650, in run
    with outcome.testPartExecutor(self):
         ~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^
  File "C:\Python313\Lib\contextlib.py", line 162, in __exit__
    self.gen.throw(value)
    ~~~~~~~~~~~~~~^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 75, in testPartExecutor
    _addError(self.result, test_case, exc_info)
    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 98, in _addError
    result.addFailure(test, exc_info)
    ~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\result.py", line 17, in inner
    return method(self, *args, **kw)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 205, in addFailure
    testinfo = self.infoclass(self, test, self.infoclass.FAILURE, err)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 90, in __init__
    else self.test_result._exc_info_to_string(
         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        self.err, test_method))
        ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 425, in _exc_info_to_string
    length = self._count_relevant_tb_levels(tb)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'HtmlTestResult' object has no attribute '_count_relevant_tb_levels'. Did you mean: '_is_relevant_tb_level'?

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\git hub projects\cloud\test_vm_manager.py", line 56, in setUp
    self.vm_manager = VMManager(vms_dir=self.test_vms_dir, isos_dir=self.test_isos_dir)
                      ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\git hub projects\cloud\services\vm_manager.py", line 30, in __init__
    self.disk_manager = DiskManager()
                        ~~~~~~~~~~~^^
  File "D:\git hub projects\cloud\services\disk_manager.py", line 27, in __init__
    self._load_registry()
    ~~~~~~~~~~~~~~~~~~~^^
  File "D:\git hub projects\cloud\services\disk_manager.py", line 46, in _load_registry
    self._validate_registry()
    ~~~~~~~~~~~~~~~~~~~~~~~^^
  File "D:\git hub projects\cloud\services\disk_manager.py", line 73, in _validate_registry
    info = json.loads(result.stdout)
  File "C:\Python313\Lib\json\__init__.py", line 339, in loads
    raise TypeError(f'the JSON object must be str, bytes or bytearray, '
                    f'not {s.__class__.__name__}')
TypeError: the JSON object must be str, bytes or bytearray, not MagicMock

======================================================================
ERROR: test_create_vm_nonexistent_disk (test_vm_manager.TestVMManager.test_create_vm_nonexistent_disk)
Test creating a VM with a disk that doesn't exist
----------------------------------------------------------------------
Traceback (most recent call last):
  File "D:\git hub projects\cloud\test_disk_manager.py", line 66, in test_create_disk_invalid_size
    self.assertIn("Invalid size format", message)
    ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 'Invalid size format' not found in 'Disk size must be greater than zero'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\git hub projects\cloud\run_tests.py", line 59, in run_tests
    result = runner.run(test_suite)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\runner.py", line 72, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 84, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 122, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 84, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 122, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 707, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 650, in run
    with outcome.testPartExecutor(self):
         ~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^
  File "C:\Python313\Lib\contextlib.py", line 162, in __exit__
    self.gen.throw(value)
    ~~~~~~~~~~~~~~^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 75, in testPartExecutor
    _addError(self.result, test_case, exc_info)
    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 98, in _addError
    result.addFailure(test, exc_info)
    ~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\result.py", line 17, in inner
    return method(self, *args, **kw)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 205, in addFailure
    testinfo = self.infoclass(self, test, self.infoclass.FAILURE, err)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 90, in __init__
    else self.test_result._exc_info_to_string(
         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        self.err, test_method))
        ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 425, in _exc_info_to_string
    length = self._count_relevant_tb_levels(tb)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'HtmlTestResult' object has no attribute '_count_relevant_tb_levels'. Did you mean: '_is_relevant_tb_level'?

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\git hub projects\cloud\test_vm_manager.py", line 56, in setUp
    self.vm_manager = VMManager(vms_dir=self.test_vms_dir, isos_dir=self.test_isos_dir)
                      ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\git hub projects\cloud\services\vm_manager.py", line 30, in __init__
    self.disk_manager = DiskManager()
                        ~~~~~~~~~~~^^
  File "D:\git hub projects\cloud\services\disk_manager.py", line 27, in __init__
    self._load_registry()
    ~~~~~~~~~~~~~~~~~~~^^
  File "D:\git hub projects\cloud\services\disk_manager.py", line 46, in _load_registry
    self._validate_registry()
    ~~~~~~~~~~~~~~~~~~~~~~~^^
  File "D:\git hub projects\cloud\services\disk_manager.py", line 73, in _validate_registry
    info = json.loads(result.stdout)
  File "C:\Python313\Lib\json\__init__.py", line 339, in loads
    raise TypeError(f'the JSON object must be str, bytes or bytearray, '
                    f'not {s.__class__.__name__}')
TypeError: the JSON object must be str, bytes or bytearray, not MagicMock

======================================================================
ERROR: test_create_vm_success (test_vm_manager.TestVMManager.test_create_vm_success)
Test creating a VM with valid parameters
----------------------------------------------------------------------
Traceback (most recent call last):
  File "D:\git hub projects\cloud\test_disk_manager.py", line 66, in test_create_disk_invalid_size
    self.assertIn("Invalid size format", message)
    ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 'Invalid size format' not found in 'Disk size must be greater than zero'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\git hub projects\cloud\run_tests.py", line 59, in run_tests
    result = runner.run(test_suite)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\runner.py", line 72, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 84, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 122, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 84, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 122, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 707, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 650, in run
    with outcome.testPartExecutor(self):
         ~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^
  File "C:\Python313\Lib\contextlib.py", line 162, in __exit__
    self.gen.throw(value)
    ~~~~~~~~~~~~~~^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 75, in testPartExecutor
    _addError(self.result, test_case, exc_info)
    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 98, in _addError
    result.addFailure(test, exc_info)
    ~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\result.py", line 17, in inner
    return method(self, *args, **kw)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 205, in addFailure
    testinfo = self.infoclass(self, test, self.infoclass.FAILURE, err)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 90, in __init__
    else self.test_result._exc_info_to_string(
         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        self.err, test_method))
        ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 425, in _exc_info_to_string
    length = self._count_relevant_tb_levels(tb)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'HtmlTestResult' object has no attribute '_count_relevant_tb_levels'. Did you mean: '_is_relevant_tb_level'?

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\git hub projects\cloud\test_vm_manager.py", line 56, in setUp
    self.vm_manager = VMManager(vms_dir=self.test_vms_dir, isos_dir=self.test_isos_dir)
                      ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\git hub projects\cloud\services\vm_manager.py", line 30, in __init__
    self.disk_manager = DiskManager()
                        ~~~~~~~~~~~^^
  File "D:\git hub projects\cloud\services\disk_manager.py", line 27, in __init__
    self._load_registry()
    ~~~~~~~~~~~~~~~~~~~^^
  File "D:\git hub projects\cloud\services\disk_manager.py", line 46, in _load_registry
    self._validate_registry()
    ~~~~~~~~~~~~~~~~~~~~~~~^^
  File "D:\git hub projects\cloud\services\disk_manager.py", line 73, in _validate_registry
    info = json.loads(result.stdout)
  File "C:\Python313\Lib\json\__init__.py", line 339, in loads
    raise TypeError(f'the JSON object must be str, bytes or bytearray, '
                    f'not {s.__class__.__name__}')
TypeError: the JSON object must be str, bytes or bytearray, not MagicMock

======================================================================
ERROR: test_create_vm_with_iso (test_vm_manager.TestVMManager.test_create_vm_with_iso)
Test creating a VM with an ISO file
----------------------------------------------------------------------
Traceback (most recent call last):
  File "D:\git hub projects\cloud\test_disk_manager.py", line 66, in test_create_disk_invalid_size
    self.assertIn("Invalid size format", message)
    ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 'Invalid size format' not found in 'Disk size must be greater than zero'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\git hub projects\cloud\run_tests.py", line 59, in run_tests
    result = runner.run(test_suite)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\runner.py", line 72, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 84, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 122, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 84, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 122, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 707, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 650, in run
    with outcome.testPartExecutor(self):
         ~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^
  File "C:\Python313\Lib\contextlib.py", line 162, in __exit__
    self.gen.throw(value)
    ~~~~~~~~~~~~~~^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 75, in testPartExecutor
    _addError(self.result, test_case, exc_info)
    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 98, in _addError
    result.addFailure(test, exc_info)
    ~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\result.py", line 17, in inner
    return method(self, *args, **kw)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 205, in addFailure
    testinfo = self.infoclass(self, test, self.infoclass.FAILURE, err)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 90, in __init__
    else self.test_result._exc_info_to_string(
         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        self.err, test_method))
        ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 425, in _exc_info_to_string
    length = self._count_relevant_tb_levels(tb)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'HtmlTestResult' object has no attribute '_count_relevant_tb_levels'. Did you mean: '_is_relevant_tb_level'?

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\git hub projects\cloud\test_vm_manager.py", line 56, in setUp
    self.vm_manager = VMManager(vms_dir=self.test_vms_dir, isos_dir=self.test_isos_dir)
                      ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\git hub projects\cloud\services\vm_manager.py", line 30, in __init__
    self.disk_manager = DiskManager()
                        ~~~~~~~~~~~^^
  File "D:\git hub projects\cloud\services\disk_manager.py", line 27, in __init__
    self._load_registry()
    ~~~~~~~~~~~~~~~~~~~^^
  File "D:\git hub projects\cloud\services\disk_manager.py", line 46, in _load_registry
    self._validate_registry()
    ~~~~~~~~~~~~~~~~~~~~~~~^^
  File "D:\git hub projects\cloud\services\disk_manager.py", line 73, in _validate_registry
    info = json.loads(result.stdout)
  File "C:\Python313\Lib\json\__init__.py", line 339, in loads
    raise TypeError(f'the JSON object must be str, bytes or bytearray, '
                    f'not {s.__class__.__name__}')
TypeError: the JSON object must be str, bytes or bytearray, not MagicMock

======================================================================
ERROR: test_delete_nonexistent_vm (test_vm_manager.TestVMManager.test_delete_nonexistent_vm)
Test deleting a VM that doesn't exist
----------------------------------------------------------------------
Traceback (most recent call last):
  File "D:\git hub projects\cloud\test_disk_manager.py", line 66, in test_create_disk_invalid_size
    self.assertIn("Invalid size format", message)
    ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 'Invalid size format' not found in 'Disk size must be greater than zero'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\git hub projects\cloud\run_tests.py", line 59, in run_tests
    result = runner.run(test_suite)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\runner.py", line 72, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 84, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 122, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 84, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 122, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 707, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 650, in run
    with outcome.testPartExecutor(self):
         ~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^
  File "C:\Python313\Lib\contextlib.py", line 162, in __exit__
    self.gen.throw(value)
    ~~~~~~~~~~~~~~^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 75, in testPartExecutor
    _addError(self.result, test_case, exc_info)
    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 98, in _addError
    result.addFailure(test, exc_info)
    ~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\result.py", line 17, in inner
    return method(self, *args, **kw)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 205, in addFailure
    testinfo = self.infoclass(self, test, self.infoclass.FAILURE, err)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 90, in __init__
    else self.test_result._exc_info_to_string(
         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        self.err, test_method))
        ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 425, in _exc_info_to_string
    length = self._count_relevant_tb_levels(tb)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'HtmlTestResult' object has no attribute '_count_relevant_tb_levels'. Did you mean: '_is_relevant_tb_level'?

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\git hub projects\cloud\test_vm_manager.py", line 56, in setUp
    self.vm_manager = VMManager(vms_dir=self.test_vms_dir, isos_dir=self.test_isos_dir)
                      ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\git hub projects\cloud\services\vm_manager.py", line 30, in __init__
    self.disk_manager = DiskManager()
                        ~~~~~~~~~~~^^
  File "D:\git hub projects\cloud\services\disk_manager.py", line 27, in __init__
    self._load_registry()
    ~~~~~~~~~~~~~~~~~~~^^
  File "D:\git hub projects\cloud\services\disk_manager.py", line 46, in _load_registry
    self._validate_registry()
    ~~~~~~~~~~~~~~~~~~~~~~~^^
  File "D:\git hub projects\cloud\services\disk_manager.py", line 73, in _validate_registry
    info = json.loads(result.stdout)
  File "C:\Python313\Lib\json\__init__.py", line 339, in loads
    raise TypeError(f'the JSON object must be str, bytes or bytearray, '
                    f'not {s.__class__.__name__}')
TypeError: the JSON object must be str, bytes or bytearray, not MagicMock

======================================================================
ERROR: test_delete_vm (test_vm_manager.TestVMManager.test_delete_vm)
Test deleting a VM
----------------------------------------------------------------------
Traceback (most recent call last):
  File "D:\git hub projects\cloud\test_disk_manager.py", line 66, in test_create_disk_invalid_size
    self.assertIn("Invalid size format", message)
    ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 'Invalid size format' not found in 'Disk size must be greater than zero'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\git hub projects\cloud\run_tests.py", line 59, in run_tests
    result = runner.run(test_suite)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\runner.py", line 72, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 84, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 122, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 84, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 122, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 707, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 650, in run
    with outcome.testPartExecutor(self):
         ~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^
  File "C:\Python313\Lib\contextlib.py", line 162, in __exit__
    self.gen.throw(value)
    ~~~~~~~~~~~~~~^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 75, in testPartExecutor
    _addError(self.result, test_case, exc_info)
    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 98, in _addError
    result.addFailure(test, exc_info)
    ~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\result.py", line 17, in inner
    return method(self, *args, **kw)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 205, in addFailure
    testinfo = self.infoclass(self, test, self.infoclass.FAILURE, err)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 90, in __init__
    else self.test_result._exc_info_to_string(
         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        self.err, test_method))
        ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 425, in _exc_info_to_string
    length = self._count_relevant_tb_levels(tb)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'HtmlTestResult' object has no attribute '_count_relevant_tb_levels'. Did you mean: '_is_relevant_tb_level'?

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\git hub projects\cloud\test_vm_manager.py", line 56, in setUp
    self.vm_manager = VMManager(vms_dir=self.test_vms_dir, isos_dir=self.test_isos_dir)
                      ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\git hub projects\cloud\services\vm_manager.py", line 30, in __init__
    self.disk_manager = DiskManager()
                        ~~~~~~~~~~~^^
  File "D:\git hub projects\cloud\services\disk_manager.py", line 27, in __init__
    self._load_registry()
    ~~~~~~~~~~~~~~~~~~~^^
  File "D:\git hub projects\cloud\services\disk_manager.py", line 46, in _load_registry
    self._validate_registry()
    ~~~~~~~~~~~~~~~~~~~~~~~^^
  File "D:\git hub projects\cloud\services\disk_manager.py", line 73, in _validate_registry
    info = json.loads(result.stdout)
  File "C:\Python313\Lib\json\__init__.py", line 339, in loads
    raise TypeError(f'the JSON object must be str, bytes or bytearray, '
                    f'not {s.__class__.__name__}')
TypeError: the JSON object must be str, bytes or bytearray, not MagicMock

======================================================================
ERROR: test_list_isos (test_vm_manager.TestVMManager.test_list_isos)
Test listing available ISO files
----------------------------------------------------------------------
Traceback (most recent call last):
  File "D:\git hub projects\cloud\test_disk_manager.py", line 66, in test_create_disk_invalid_size
    self.assertIn("Invalid size format", message)
    ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 'Invalid size format' not found in 'Disk size must be greater than zero'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\git hub projects\cloud\run_tests.py", line 59, in run_tests
    result = runner.run(test_suite)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\runner.py", line 72, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 84, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 122, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 84, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 122, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 707, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 650, in run
    with outcome.testPartExecutor(self):
         ~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^
  File "C:\Python313\Lib\contextlib.py", line 162, in __exit__
    self.gen.throw(value)
    ~~~~~~~~~~~~~~^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 75, in testPartExecutor
    _addError(self.result, test_case, exc_info)
    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 98, in _addError
    result.addFailure(test, exc_info)
    ~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\result.py", line 17, in inner
    return method(self, *args, **kw)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 205, in addFailure
    testinfo = self.infoclass(self, test, self.infoclass.FAILURE, err)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 90, in __init__
    else self.test_result._exc_info_to_string(
         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        self.err, test_method))
        ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 425, in _exc_info_to_string
    length = self._count_relevant_tb_levels(tb)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'HtmlTestResult' object has no attribute '_count_relevant_tb_levels'. Did you mean: '_is_relevant_tb_level'?

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\git hub projects\cloud\test_vm_manager.py", line 56, in setUp
    self.vm_manager = VMManager(vms_dir=self.test_vms_dir, isos_dir=self.test_isos_dir)
                      ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\git hub projects\cloud\services\vm_manager.py", line 30, in __init__
    self.disk_manager = DiskManager()
                        ~~~~~~~~~~~^^
  File "D:\git hub projects\cloud\services\disk_manager.py", line 27, in __init__
    self._load_registry()
    ~~~~~~~~~~~~~~~~~~~^^
  File "D:\git hub projects\cloud\services\disk_manager.py", line 46, in _load_registry
    self._validate_registry()
    ~~~~~~~~~~~~~~~~~~~~~~~^^
  File "D:\git hub projects\cloud\services\disk_manager.py", line 73, in _validate_registry
    info = json.loads(result.stdout)
  File "C:\Python313\Lib\json\__init__.py", line 339, in loads
    raise TypeError(f'the JSON object must be str, bytes or bytearray, '
                    f'not {s.__class__.__name__}')
TypeError: the JSON object must be str, bytes or bytearray, not MagicMock

======================================================================
ERROR: test_list_vms (test_vm_manager.TestVMManager.test_list_vms)
Test listing available VMs
----------------------------------------------------------------------
Traceback (most recent call last):
  File "D:\git hub projects\cloud\test_disk_manager.py", line 66, in test_create_disk_invalid_size
    self.assertIn("Invalid size format", message)
    ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 'Invalid size format' not found in 'Disk size must be greater than zero'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\git hub projects\cloud\run_tests.py", line 59, in run_tests
    result = runner.run(test_suite)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\runner.py", line 72, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 84, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 122, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 84, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 122, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 707, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 650, in run
    with outcome.testPartExecutor(self):
         ~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^
  File "C:\Python313\Lib\contextlib.py", line 162, in __exit__
    self.gen.throw(value)
    ~~~~~~~~~~~~~~^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 75, in testPartExecutor
    _addError(self.result, test_case, exc_info)
    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 98, in _addError
    result.addFailure(test, exc_info)
    ~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\result.py", line 17, in inner
    return method(self, *args, **kw)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 205, in addFailure
    testinfo = self.infoclass(self, test, self.infoclass.FAILURE, err)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 90, in __init__
    else self.test_result._exc_info_to_string(
         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        self.err, test_method))
        ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 425, in _exc_info_to_string
    length = self._count_relevant_tb_levels(tb)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'HtmlTestResult' object has no attribute '_count_relevant_tb_levels'. Did you mean: '_is_relevant_tb_level'?

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\git hub projects\cloud\test_vm_manager.py", line 56, in setUp
    self.vm_manager = VMManager(vms_dir=self.test_vms_dir, isos_dir=self.test_isos_dir)
                      ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\git hub projects\cloud\services\vm_manager.py", line 30, in __init__
    self.disk_manager = DiskManager()
                        ~~~~~~~~~~~^^
  File "D:\git hub projects\cloud\services\disk_manager.py", line 27, in __init__
    self._load_registry()
    ~~~~~~~~~~~~~~~~~~~^^
  File "D:\git hub projects\cloud\services\disk_manager.py", line 46, in _load_registry
    self._validate_registry()
    ~~~~~~~~~~~~~~~~~~~~~~~^^
  File "D:\git hub projects\cloud\services\disk_manager.py", line 73, in _validate_registry
    info = json.loads(result.stdout)
  File "C:\Python313\Lib\json\__init__.py", line 339, in loads
    raise TypeError(f'the JSON object must be str, bytes or bytearray, '
                    f'not {s.__class__.__name__}')
TypeError: the JSON object must be str, bytes or bytearray, not MagicMock

======================================================================
ERROR: test_start_nonexistent_vm (test_vm_manager.TestVMManager.test_start_nonexistent_vm)
Test starting a VM that doesn't exist
----------------------------------------------------------------------
Traceback (most recent call last):
  File "D:\git hub projects\cloud\test_disk_manager.py", line 66, in test_create_disk_invalid_size
    self.assertIn("Invalid size format", message)
    ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 'Invalid size format' not found in 'Disk size must be greater than zero'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\git hub projects\cloud\run_tests.py", line 59, in run_tests
    result = runner.run(test_suite)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\runner.py", line 72, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 84, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 122, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 84, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 122, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 707, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 650, in run
    with outcome.testPartExecutor(self):
         ~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^
  File "C:\Python313\Lib\contextlib.py", line 162, in __exit__
    self.gen.throw(value)
    ~~~~~~~~~~~~~~^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 75, in testPartExecutor
    _addError(self.result, test_case, exc_info)
    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 98, in _addError
    result.addFailure(test, exc_info)
    ~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\result.py", line 17, in inner
    return method(self, *args, **kw)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 205, in addFailure
    testinfo = self.infoclass(self, test, self.infoclass.FAILURE, err)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 90, in __init__
    else self.test_result._exc_info_to_string(
         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        self.err, test_method))
        ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 425, in _exc_info_to_string
    length = self._count_relevant_tb_levels(tb)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'HtmlTestResult' object has no attribute '_count_relevant_tb_levels'. Did you mean: '_is_relevant_tb_level'?

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\git hub projects\cloud\test_vm_manager.py", line 56, in setUp
    self.vm_manager = VMManager(vms_dir=self.test_vms_dir, isos_dir=self.test_isos_dir)
                      ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\git hub projects\cloud\services\vm_manager.py", line 30, in __init__
    self.disk_manager = DiskManager()
                        ~~~~~~~~~~~^^
  File "D:\git hub projects\cloud\services\disk_manager.py", line 27, in __init__
    self._load_registry()
    ~~~~~~~~~~~~~~~~~~~^^
  File "D:\git hub projects\cloud\services\disk_manager.py", line 46, in _load_registry
    self._validate_registry()
    ~~~~~~~~~~~~~~~~~~~~~~~^^
  File "D:\git hub projects\cloud\services\disk_manager.py", line 73, in _validate_registry
    info = json.loads(result.stdout)
  File "C:\Python313\Lib\json\__init__.py", line 339, in loads
    raise TypeError(f'the JSON object must be str, bytes or bytearray, '
                    f'not {s.__class__.__name__}')
TypeError: the JSON object must be str, bytes or bytearray, not MagicMock

======================================================================
ERROR: test_start_vm (test_vm_manager.TestVMManager.test_start_vm)
Test starting a VM
----------------------------------------------------------------------
Traceback (most recent call last):
  File "D:\git hub projects\cloud\test_disk_manager.py", line 66, in test_create_disk_invalid_size
    self.assertIn("Invalid size format", message)
    ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 'Invalid size format' not found in 'Disk size must be greater than zero'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\git hub projects\cloud\run_tests.py", line 59, in run_tests
    result = runner.run(test_suite)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\runner.py", line 72, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 84, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 122, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 84, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 122, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 707, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 650, in run
    with outcome.testPartExecutor(self):
         ~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^
  File "C:\Python313\Lib\contextlib.py", line 162, in __exit__
    self.gen.throw(value)
    ~~~~~~~~~~~~~~^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 75, in testPartExecutor
    _addError(self.result, test_case, exc_info)
    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 98, in _addError
    result.addFailure(test, exc_info)
    ~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\result.py", line 17, in inner
    return method(self, *args, **kw)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 205, in addFailure
    testinfo = self.infoclass(self, test, self.infoclass.FAILURE, err)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 90, in __init__
    else self.test_result._exc_info_to_string(
         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        self.err, test_method))
        ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 425, in _exc_info_to_string
    length = self._count_relevant_tb_levels(tb)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'HtmlTestResult' object has no attribute '_count_relevant_tb_levels'. Did you mean: '_is_relevant_tb_level'?

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\git hub projects\cloud\test_vm_manager.py", line 56, in setUp
    self.vm_manager = VMManager(vms_dir=self.test_vms_dir, isos_dir=self.test_isos_dir)
                      ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\git hub projects\cloud\services\vm_manager.py", line 30, in __init__
    self.disk_manager = DiskManager()
                        ~~~~~~~~~~~^^
  File "D:\git hub projects\cloud\services\disk_manager.py", line 27, in __init__
    self._load_registry()
    ~~~~~~~~~~~~~~~~~~~^^
  File "D:\git hub projects\cloud\services\disk_manager.py", line 46, in _load_registry
    self._validate_registry()
    ~~~~~~~~~~~~~~~~~~~~~~~^^
  File "D:\git hub projects\cloud\services\disk_manager.py", line 73, in _validate_registry
    info = json.loads(result.stdout)
  File "C:\Python313\Lib\json\__init__.py", line 339, in loads
    raise TypeError(f'the JSON object must be str, bytes or bytearray, '
                    f'not {s.__class__.__name__}')
TypeError: the JSON object must be str, bytes or bytearray, not MagicMock

======================================================================
ERROR: test_validate_registry (test_vm_manager.TestVMManager.test_validate_registry)
Test VM registry validation
----------------------------------------------------------------------
Traceback (most recent call last):
  File "D:\git hub projects\cloud\test_disk_manager.py", line 66, in test_create_disk_invalid_size
    self.assertIn("Invalid size format", message)
    ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 'Invalid size format' not found in 'Disk size must be greater than zero'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\git hub projects\cloud\run_tests.py", line 59, in run_tests
    result = runner.run(test_suite)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\runner.py", line 72, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 84, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 122, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 84, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 122, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 707, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 650, in run
    with outcome.testPartExecutor(self):
         ~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^
  File "C:\Python313\Lib\contextlib.py", line 162, in __exit__
    self.gen.throw(value)
    ~~~~~~~~~~~~~~^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 75, in testPartExecutor
    _addError(self.result, test_case, exc_info)
    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 98, in _addError
    result.addFailure(test, exc_info)
    ~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\result.py", line 17, in inner
    return method(self, *args, **kw)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 205, in addFailure
    testinfo = self.infoclass(self, test, self.infoclass.FAILURE, err)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 90, in __init__
    else self.test_result._exc_info_to_string(
         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        self.err, test_method))
        ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 425, in _exc_info_to_string
    length = self._count_relevant_tb_levels(tb)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'HtmlTestResult' object has no attribute '_count_relevant_tb_levels'. Did you mean: '_is_relevant_tb_level'?

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\git hub projects\cloud\test_vm_manager.py", line 56, in setUp
    self.vm_manager = VMManager(vms_dir=self.test_vms_dir, isos_dir=self.test_isos_dir)
                      ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\git hub projects\cloud\services\vm_manager.py", line 30, in __init__
    self.disk_manager = DiskManager()
                        ~~~~~~~~~~~^^
  File "D:\git hub projects\cloud\services\disk_manager.py", line 27, in __init__
    self._load_registry()
    ~~~~~~~~~~~~~~~~~~~^^
  File "D:\git hub projects\cloud\services\disk_manager.py", line 46, in _load_registry
    self._validate_registry()
    ~~~~~~~~~~~~~~~~~~~~~~~^^
  File "D:\git hub projects\cloud\services\disk_manager.py", line 73, in _validate_registry
    info = json.loads(result.stdout)
  File "C:\Python313\Lib\json\__init__.py", line 339, in loads
    raise TypeError(f'the JSON object must be str, bytes or bytearray, '
                    f'not {s.__class__.__name__}')
TypeError: the JSON object must be str, bytes or bytearray, not MagicMock

======================================================================
ERROR: test_create_disk_then_vm (test_integration.TestDiskVMIntegration.test_create_disk_then_vm)
Test creating a disk and then using it to create a VM
----------------------------------------------------------------------
Traceback (most recent call last):
  File "D:\git hub projects\cloud\test_disk_manager.py", line 66, in test_create_disk_invalid_size
    self.assertIn("Invalid size format", message)
    ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 'Invalid size format' not found in 'Disk size must be greater than zero'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\git hub projects\cloud\run_tests.py", line 59, in run_tests
    result = runner.run(test_suite)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\runner.py", line 72, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 84, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 122, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 84, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 122, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 707, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 650, in run
    with outcome.testPartExecutor(self):
         ~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^
  File "C:\Python313\Lib\contextlib.py", line 162, in __exit__
    self.gen.throw(value)
    ~~~~~~~~~~~~~~^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 75, in testPartExecutor
    _addError(self.result, test_case, exc_info)
    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 98, in _addError
    result.addFailure(test, exc_info)
    ~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\result.py", line 17, in inner
    return method(self, *args, **kw)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 205, in addFailure
    testinfo = self.infoclass(self, test, self.infoclass.FAILURE, err)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 90, in __init__
    else self.test_result._exc_info_to_string(
         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        self.err, test_method))
        ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 425, in _exc_info_to_string
    length = self._count_relevant_tb_levels(tb)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'HtmlTestResult' object has no attribute '_count_relevant_tb_levels'. Did you mean: '_is_relevant_tb_level'?

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\git hub projects\cloud\test_integration.py", line 32, in setUp
    self.vm_manager = VMManager(vms_dir=self.test_vms_dir, isos_dir=self.test_isos_dir)
                      ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\git hub projects\cloud\services\vm_manager.py", line 30, in __init__
    self.disk_manager = DiskManager()
                        ~~~~~~~~~~~^^
  File "D:\git hub projects\cloud\services\disk_manager.py", line 27, in __init__
    self._load_registry()
    ~~~~~~~~~~~~~~~~~~~^^
  File "D:\git hub projects\cloud\services\disk_manager.py", line 46, in _load_registry
    self._validate_registry()
    ~~~~~~~~~~~~~~~~~~~~~~~^^
  File "D:\git hub projects\cloud\services\disk_manager.py", line 73, in _validate_registry
    info = json.loads(result.stdout)
  File "C:\Python313\Lib\json\__init__.py", line 339, in loads
    raise TypeError(f'the JSON object must be str, bytes or bytearray, '
                    f'not {s.__class__.__name__}')
TypeError: the JSON object must be str, bytes or bytearray, not MagicMock

======================================================================
ERROR: test_create_disk_vm_and_start (test_integration.TestDiskVMIntegration.test_create_disk_vm_and_start)
Test creating a disk, creating a VM, and then starting it
----------------------------------------------------------------------
Traceback (most recent call last):
  File "D:\git hub projects\cloud\test_disk_manager.py", line 66, in test_create_disk_invalid_size
    self.assertIn("Invalid size format", message)
    ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 'Invalid size format' not found in 'Disk size must be greater than zero'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\git hub projects\cloud\run_tests.py", line 59, in run_tests
    result = runner.run(test_suite)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\runner.py", line 72, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 84, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 122, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 84, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 122, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 707, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 650, in run
    with outcome.testPartExecutor(self):
         ~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^
  File "C:\Python313\Lib\contextlib.py", line 162, in __exit__
    self.gen.throw(value)
    ~~~~~~~~~~~~~~^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 75, in testPartExecutor
    _addError(self.result, test_case, exc_info)
    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 98, in _addError
    result.addFailure(test, exc_info)
    ~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\result.py", line 17, in inner
    return method(self, *args, **kw)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 205, in addFailure
    testinfo = self.infoclass(self, test, self.infoclass.FAILURE, err)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 90, in __init__
    else self.test_result._exc_info_to_string(
         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        self.err, test_method))
        ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 425, in _exc_info_to_string
    length = self._count_relevant_tb_levels(tb)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'HtmlTestResult' object has no attribute '_count_relevant_tb_levels'. Did you mean: '_is_relevant_tb_level'?

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\git hub projects\cloud\test_integration.py", line 32, in setUp
    self.vm_manager = VMManager(vms_dir=self.test_vms_dir, isos_dir=self.test_isos_dir)
                      ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\git hub projects\cloud\services\vm_manager.py", line 30, in __init__
    self.disk_manager = DiskManager()
                        ~~~~~~~~~~~^^
  File "D:\git hub projects\cloud\services\disk_manager.py", line 27, in __init__
    self._load_registry()
    ~~~~~~~~~~~~~~~~~~~^^
  File "D:\git hub projects\cloud\services\disk_manager.py", line 46, in _load_registry
    self._validate_registry()
    ~~~~~~~~~~~~~~~~~~~~~~~^^
  File "D:\git hub projects\cloud\services\disk_manager.py", line 73, in _validate_registry
    info = json.loads(result.stdout)
  File "C:\Python313\Lib\json\__init__.py", line 339, in loads
    raise TypeError(f'the JSON object must be str, bytes or bytearray, '
                    f'not {s.__class__.__name__}')
TypeError: the JSON object must be str, bytes or bytearray, not MagicMock

======================================================================
ERROR: test_delete_disk_used_by_vm (test_integration.TestDiskVMIntegration.test_delete_disk_used_by_vm)
Test that a disk used by a VM cannot be deleted
----------------------------------------------------------------------
Traceback (most recent call last):
  File "D:\git hub projects\cloud\test_disk_manager.py", line 66, in test_create_disk_invalid_size
    self.assertIn("Invalid size format", message)
    ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 'Invalid size format' not found in 'Disk size must be greater than zero'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\git hub projects\cloud\run_tests.py", line 59, in run_tests
    result = runner.run(test_suite)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\runner.py", line 72, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 84, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 122, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 84, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 122, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 707, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 650, in run
    with outcome.testPartExecutor(self):
         ~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^
  File "C:\Python313\Lib\contextlib.py", line 162, in __exit__
    self.gen.throw(value)
    ~~~~~~~~~~~~~~^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 75, in testPartExecutor
    _addError(self.result, test_case, exc_info)
    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 98, in _addError
    result.addFailure(test, exc_info)
    ~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\result.py", line 17, in inner
    return method(self, *args, **kw)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 205, in addFailure
    testinfo = self.infoclass(self, test, self.infoclass.FAILURE, err)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 90, in __init__
    else self.test_result._exc_info_to_string(
         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        self.err, test_method))
        ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 425, in _exc_info_to_string
    length = self._count_relevant_tb_levels(tb)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'HtmlTestResult' object has no attribute '_count_relevant_tb_levels'. Did you mean: '_is_relevant_tb_level'?

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\git hub projects\cloud\test_integration.py", line 32, in setUp
    self.vm_manager = VMManager(vms_dir=self.test_vms_dir, isos_dir=self.test_isos_dir)
                      ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\git hub projects\cloud\services\vm_manager.py", line 30, in __init__
    self.disk_manager = DiskManager()
                        ~~~~~~~~~~~^^
  File "D:\git hub projects\cloud\services\disk_manager.py", line 27, in __init__
    self._load_registry()
    ~~~~~~~~~~~~~~~~~~~^^
  File "D:\git hub projects\cloud\services\disk_manager.py", line 46, in _load_registry
    self._validate_registry()
    ~~~~~~~~~~~~~~~~~~~~~~~^^
  File "D:\git hub projects\cloud\services\disk_manager.py", line 73, in _validate_registry
    info = json.loads(result.stdout)
  File "C:\Python313\Lib\json\__init__.py", line 339, in loads
    raise TypeError(f'the JSON object must be str, bytes or bytearray, '
                    f'not {s.__class__.__name__}')
TypeError: the JSON object must be str, bytes or bytearray, not MagicMock

======================================================================
ERROR: test_refreshed_disk_available_to_vm (test_integration.TestDiskVMIntegration.test_refreshed_disk_available_to_vm)
Test that newly created disks are recognized by the VM manager
----------------------------------------------------------------------
Traceback (most recent call last):
  File "D:\git hub projects\cloud\test_disk_manager.py", line 66, in test_create_disk_invalid_size
    self.assertIn("Invalid size format", message)
    ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 'Invalid size format' not found in 'Disk size must be greater than zero'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\git hub projects\cloud\run_tests.py", line 59, in run_tests
    result = runner.run(test_suite)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\runner.py", line 72, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 84, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 122, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 84, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 122, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 707, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 650, in run
    with outcome.testPartExecutor(self):
         ~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^
  File "C:\Python313\Lib\contextlib.py", line 162, in __exit__
    self.gen.throw(value)
    ~~~~~~~~~~~~~~^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 75, in testPartExecutor
    _addError(self.result, test_case, exc_info)
    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 98, in _addError
    result.addFailure(test, exc_info)
    ~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\result.py", line 17, in inner
    return method(self, *args, **kw)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 205, in addFailure
    testinfo = self.infoclass(self, test, self.infoclass.FAILURE, err)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 90, in __init__
    else self.test_result._exc_info_to_string(
         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        self.err, test_method))
        ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 425, in _exc_info_to_string
    length = self._count_relevant_tb_levels(tb)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'HtmlTestResult' object has no attribute '_count_relevant_tb_levels'. Did you mean: '_is_relevant_tb_level'?

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\git hub projects\cloud\test_integration.py", line 32, in setUp
    self.vm_manager = VMManager(vms_dir=self.test_vms_dir, isos_dir=self.test_isos_dir)
                      ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\git hub projects\cloud\services\vm_manager.py", line 30, in __init__
    self.disk_manager = DiskManager()
                        ~~~~~~~~~~~^^
  File "D:\git hub projects\cloud\services\disk_manager.py", line 27, in __init__
    self._load_registry()
    ~~~~~~~~~~~~~~~~~~~^^
  File "D:\git hub projects\cloud\services\disk_manager.py", line 46, in _load_registry
    self._validate_registry()
    ~~~~~~~~~~~~~~~~~~~~~~~^^
  File "D:\git hub projects\cloud\services\disk_manager.py", line 73, in _validate_registry
    info = json.loads(result.stdout)
  File "C:\Python313\Lib\json\__init__.py", line 339, in loads
    raise TypeError(f'the JSON object must be str, bytes or bytearray, '
                    f'not {s.__class__.__name__}')
TypeError: the JSON object must be str, bytes or bytearray, not MagicMock

======================================================================
ERROR: test_vm_registry_sync_with_disk_registry (test_integration.TestDiskVMIntegration.test_vm_registry_sync_with_disk_registry)
Test that VM registry stays in sync with disk registry
----------------------------------------------------------------------
Traceback (most recent call last):
  File "D:\git hub projects\cloud\test_disk_manager.py", line 66, in test_create_disk_invalid_size
    self.assertIn("Invalid size format", message)
    ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 'Invalid size format' not found in 'Disk size must be greater than zero'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\git hub projects\cloud\run_tests.py", line 59, in run_tests
    result = runner.run(test_suite)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\runner.py", line 72, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 84, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 122, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 84, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 122, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 707, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 650, in run
    with outcome.testPartExecutor(self):
         ~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^
  File "C:\Python313\Lib\contextlib.py", line 162, in __exit__
    self.gen.throw(value)
    ~~~~~~~~~~~~~~^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 75, in testPartExecutor
    _addError(self.result, test_case, exc_info)
    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 98, in _addError
    result.addFailure(test, exc_info)
    ~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\result.py", line 17, in inner
    return method(self, *args, **kw)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 205, in addFailure
    testinfo = self.infoclass(self, test, self.infoclass.FAILURE, err)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 90, in __init__
    else self.test_result._exc_info_to_string(
         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        self.err, test_method))
        ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 425, in _exc_info_to_string
    length = self._count_relevant_tb_levels(tb)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'HtmlTestResult' object has no attribute '_count_relevant_tb_levels'. Did you mean: '_is_relevant_tb_level'?

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\git hub projects\cloud\test_integration.py", line 32, in setUp
    self.vm_manager = VMManager(vms_dir=self.test_vms_dir, isos_dir=self.test_isos_dir)
                      ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\git hub projects\cloud\services\vm_manager.py", line 30, in __init__
    self.disk_manager = DiskManager()
                        ~~~~~~~~~~~^^
  File "D:\git hub projects\cloud\services\disk_manager.py", line 27, in __init__
    self._load_registry()
    ~~~~~~~~~~~~~~~~~~~^^
  File "D:\git hub projects\cloud\services\disk_manager.py", line 46, in _load_registry
    self._validate_registry()
    ~~~~~~~~~~~~~~~~~~~~~~~^^
  File "D:\git hub projects\cloud\services\disk_manager.py", line 73, in _validate_registry
    info = json.loads(result.stdout)
  File "C:\Python313\Lib\json\__init__.py", line 339, in loads
    raise TypeError(f'the JSON object must be str, bytes or bytearray, '
                    f'not {s.__class__.__name__}')
TypeError: the JSON object must be str, bytes or bytearray, not MagicMock

======================================================================
FAIL: test_create_disk_invalid_size (test_disk_manager.TestDiskManager.test_create_disk_invalid_size)
Test creating a disk with invalid size
----------------------------------------------------------------------
Traceback (most recent call last):
  File "D:\git hub projects\cloud\test_disk_manager.py", line 66, in test_create_disk_invalid_size
    self.assertIn("Invalid size format", message)
    ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 'Invalid size format' not found in 'Disk size must be greater than zero'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\git hub projects\cloud\run_tests.py", line 59, in run_tests
    result = runner.run(test_suite)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\runner.py", line 72, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 84, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 122, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 84, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 122, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 707, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 650, in run
    with outcome.testPartExecutor(self):
         ~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^
  File "C:\Python313\Lib\contextlib.py", line 162, in __exit__
    self.gen.throw(value)
    ~~~~~~~~~~~~~~^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 75, in testPartExecutor
    _addError(self.result, test_case, exc_info)
    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 98, in _addError
    result.addFailure(test, exc_info)
    ~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\result.py", line 17, in inner
    return method(self, *args, **kw)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 205, in addFailure
    testinfo = self.infoclass(self, test, self.infoclass.FAILURE, err)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 90, in __init__
    else self.test_result._exc_info_to_string(
         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        self.err, test_method))
        ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 425, in _exc_info_to_string
    length = self._count_relevant_tb_levels(tb)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'HtmlTestResult' object has no attribute '_count_relevant_tb_levels'. Did you mean: '_is_relevant_tb_level'?

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\git hub projects\cloud\test_disk_manager.py", line 66, in test_create_disk_invalid_size
    self.assertIn("Invalid size format", message)
    ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 'Invalid size format' not found in 'Disk size must be greater than zero'

======================================================================
FAIL: test_create_disk_success (test_disk_manager.TestDiskManager.test_create_disk_success)
Test creating a disk with valid parameters
----------------------------------------------------------------------
Traceback (most recent call last):
  File "D:\git hub projects\cloud\test_disk_manager.py", line 66, in test_create_disk_invalid_size
    self.assertIn("Invalid size format", message)
    ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 'Invalid size format' not found in 'Disk size must be greater than zero'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\git hub projects\cloud\run_tests.py", line 59, in run_tests
    result = runner.run(test_suite)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\runner.py", line 72, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 84, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 122, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 84, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 122, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 707, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 650, in run
    with outcome.testPartExecutor(self):
         ~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^
  File "C:\Python313\Lib\contextlib.py", line 162, in __exit__
    self.gen.throw(value)
    ~~~~~~~~~~~~~~^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 75, in testPartExecutor
    _addError(self.result, test_case, exc_info)
    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 98, in _addError
    result.addFailure(test, exc_info)
    ~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\result.py", line 17, in inner
    return method(self, *args, **kw)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 205, in addFailure
    testinfo = self.infoclass(self, test, self.infoclass.FAILURE, err)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 90, in __init__
    else self.test_result._exc_info_to_string(
         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        self.err, test_method))
        ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 425, in _exc_info_to_string
    length = self._count_relevant_tb_levels(tb)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'HtmlTestResult' object has no attribute '_count_relevant_tb_levels'. Did you mean: '_is_relevant_tb_level'?

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Python313\Lib\unittest\mock.py", line 1424, in patched
    return func(*newargs, **newkeywargs)
  File "D:\git hub projects\cloud\test_disk_manager.py", line 45, in test_create_disk_success
    self.assertTrue(success)
    ~~~~~~~~~~~~~~~^^^^^^^^^
AssertionError: False is not true

======================================================================
FAIL: test_list_containers (test_docker_manager.TestDockerManager.test_list_containers)
Test listing Docker containers
----------------------------------------------------------------------
Traceback (most recent call last):
  File "D:\git hub projects\cloud\test_disk_manager.py", line 66, in test_create_disk_invalid_size
    self.assertIn("Invalid size format", message)
    ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 'Invalid size format' not found in 'Disk size must be greater than zero'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\git hub projects\cloud\run_tests.py", line 59, in run_tests
    result = runner.run(test_suite)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\runner.py", line 72, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 84, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 122, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 84, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 122, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 707, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 650, in run
    with outcome.testPartExecutor(self):
         ~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^
  File "C:\Python313\Lib\contextlib.py", line 162, in __exit__
    self.gen.throw(value)
    ~~~~~~~~~~~~~~^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 75, in testPartExecutor
    _addError(self.result, test_case, exc_info)
    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 98, in _addError
    result.addFailure(test, exc_info)
    ~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\result.py", line 17, in inner
    return method(self, *args, **kw)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 205, in addFailure
    testinfo = self.infoclass(self, test, self.infoclass.FAILURE, err)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 90, in __init__
    else self.test_result._exc_info_to_string(
         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        self.err, test_method))
        ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 425, in _exc_info_to_string
    length = self._count_relevant_tb_levels(tb)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'HtmlTestResult' object has no attribute '_count_relevant_tb_levels'. Did you mean: '_is_relevant_tb_level'?

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Python313\Lib\unittest\mock.py", line 1424, in patched
    return func(*newargs, **newkeywargs)
  File "D:\git hub projects\cloud\test_docker_manager.py", line 185, in test_list_containers
    self.assertEqual(len(containers), 2)
    ~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^
AssertionError: 1 != 2

======================================================================
FAIL: test_remove_container (test_docker_manager.TestDockerManager.test_remove_container)
Test removing a Docker container
----------------------------------------------------------------------
Traceback (most recent call last):
  File "D:\git hub projects\cloud\test_disk_manager.py", line 66, in test_create_disk_invalid_size
    self.assertIn("Invalid size format", message)
    ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 'Invalid size format' not found in 'Disk size must be greater than zero'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\git hub projects\cloud\run_tests.py", line 59, in run_tests
    result = runner.run(test_suite)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\runner.py", line 72, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 84, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 122, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 84, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 122, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 707, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 650, in run
    with outcome.testPartExecutor(self):
         ~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^
  File "C:\Python313\Lib\contextlib.py", line 162, in __exit__
    self.gen.throw(value)
    ~~~~~~~~~~~~~~^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 75, in testPartExecutor
    _addError(self.result, test_case, exc_info)
    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 98, in _addError
    result.addFailure(test, exc_info)
    ~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\result.py", line 17, in inner
    return method(self, *args, **kw)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 205, in addFailure
    testinfo = self.infoclass(self, test, self.infoclass.FAILURE, err)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 90, in __init__
    else self.test_result._exc_info_to_string(
         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        self.err, test_method))
        ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 425, in _exc_info_to_string
    length = self._count_relevant_tb_levels(tb)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'HtmlTestResult' object has no attribute '_count_relevant_tb_levels'. Did you mean: '_is_relevant_tb_level'?

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Python313\Lib\unittest\mock.py", line 1424, in patched
    return func(*newargs, **newkeywargs)
  File "D:\git hub projects\cloud\test_docker_manager.py", line 257, in test_remove_container
    self.assertIn(f"Container {container_id} removed successfully", message)
    ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 'Container 123456 removed successfully' not found in 'Successfully removed container: 123456'

======================================================================
FAIL: test_run_container (test_docker_manager.TestDockerManager.test_run_container)
Test running a Docker container
----------------------------------------------------------------------
Traceback (most recent call last):
  File "D:\git hub projects\cloud\test_disk_manager.py", line 66, in test_create_disk_invalid_size
    self.assertIn("Invalid size format", message)
    ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 'Invalid size format' not found in 'Disk size must be greater than zero'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\git hub projects\cloud\run_tests.py", line 59, in run_tests
    result = runner.run(test_suite)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\runner.py", line 72, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 84, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 122, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 84, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 122, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 707, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 650, in run
    with outcome.testPartExecutor(self):
         ~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^
  File "C:\Python313\Lib\contextlib.py", line 162, in __exit__
    self.gen.throw(value)
    ~~~~~~~~~~~~~~^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 75, in testPartExecutor
    _addError(self.result, test_case, exc_info)
    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 98, in _addError
    result.addFailure(test, exc_info)
    ~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\result.py", line 17, in inner
    return method(self, *args, **kw)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 205, in addFailure
    testinfo = self.infoclass(self, test, self.infoclass.FAILURE, err)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 90, in __init__
    else self.test_result._exc_info_to_string(
         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        self.err, test_method))
        ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 425, in _exc_info_to_string
    length = self._count_relevant_tb_levels(tb)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'HtmlTestResult' object has no attribute '_count_relevant_tb_levels'. Did you mean: '_is_relevant_tb_level'?

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Python313\Lib\unittest\mock.py", line 1424, in patched
    return func(*newargs, **newkeywargs)
  File "D:\git hub projects\cloud\test_docker_manager.py", line 288, in test_run_container
    self.assertIn(f"Container started successfully", message)
    ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 'Container started successfully' not found in 'Successfully started container: 123456789abcdef'

======================================================================
FAIL: test_search_dockerhub (test_docker_manager.TestDockerManager.test_search_dockerhub)
Test searching for a Docker image on DockerHub
----------------------------------------------------------------------
Traceback (most recent call last):
  File "D:\git hub projects\cloud\test_disk_manager.py", line 66, in test_create_disk_invalid_size
    self.assertIn("Invalid size format", message)
    ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 'Invalid size format' not found in 'Disk size must be greater than zero'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\git hub projects\cloud\run_tests.py", line 59, in run_tests
    result = runner.run(test_suite)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\runner.py", line 72, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 84, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 122, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 84, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 122, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 707, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 650, in run
    with outcome.testPartExecutor(self):
         ~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^
  File "C:\Python313\Lib\contextlib.py", line 162, in __exit__
    self.gen.throw(value)
    ~~~~~~~~~~~~~~^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 75, in testPartExecutor
    _addError(self.result, test_case, exc_info)
    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 98, in _addError
    result.addFailure(test, exc_info)
    ~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\result.py", line 17, in inner
    return method(self, *args, **kw)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 205, in addFailure
    testinfo = self.infoclass(self, test, self.infoclass.FAILURE, err)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 90, in __init__
    else self.test_result._exc_info_to_string(
         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        self.err, test_method))
        ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 425, in _exc_info_to_string
    length = self._count_relevant_tb_levels(tb)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'HtmlTestResult' object has no attribute '_count_relevant_tb_levels'. Did you mean: '_is_relevant_tb_level'?

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Python313\Lib\unittest\mock.py", line 1424, in patched
    return func(*newargs, **newkeywargs)
  File "D:\git hub projects\cloud\test_docker_manager.py", line 339, in test_search_dockerhub
    self.assertEqual(len(results), 2)
    ~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^
AssertionError: 0 != 2

======================================================================
FAIL: test_start_container (test_docker_manager.TestDockerManager.test_start_container)
Test starting a Docker container
----------------------------------------------------------------------
Traceback (most recent call last):
  File "D:\git hub projects\cloud\test_disk_manager.py", line 66, in test_create_disk_invalid_size
    self.assertIn("Invalid size format", message)
    ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 'Invalid size format' not found in 'Disk size must be greater than zero'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\git hub projects\cloud\run_tests.py", line 59, in run_tests
    result = runner.run(test_suite)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\runner.py", line 72, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 84, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 122, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 84, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 122, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 707, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 650, in run
    with outcome.testPartExecutor(self):
         ~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^
  File "C:\Python313\Lib\contextlib.py", line 162, in __exit__
    self.gen.throw(value)
    ~~~~~~~~~~~~~~^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 75, in testPartExecutor
    _addError(self.result, test_case, exc_info)
    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 98, in _addError
    result.addFailure(test, exc_info)
    ~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\result.py", line 17, in inner
    return method(self, *args, **kw)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 205, in addFailure
    testinfo = self.infoclass(self, test, self.infoclass.FAILURE, err)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 90, in __init__
    else self.test_result._exc_info_to_string(
         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        self.err, test_method))
        ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 425, in _exc_info_to_string
    length = self._count_relevant_tb_levels(tb)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'HtmlTestResult' object has no attribute '_count_relevant_tb_levels'. Did you mean: '_is_relevant_tb_level'?

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Python313\Lib\unittest\mock.py", line 1424, in patched
    return func(*newargs, **newkeywargs)
  File "D:\git hub projects\cloud\test_docker_manager.py", line 211, in test_start_container
    self.assertIn(f"Container {container_id} started successfully", message)
    ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 'Container 123456 started successfully' not found in 'Successfully started container: 123456'

======================================================================
FAIL: test_stop_container (test_docker_manager.TestDockerManager.test_stop_container)
Test stopping a Docker container
----------------------------------------------------------------------
Traceback (most recent call last):
  File "D:\git hub projects\cloud\test_disk_manager.py", line 66, in test_create_disk_invalid_size
    self.assertIn("Invalid size format", message)
    ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 'Invalid size format' not found in 'Disk size must be greater than zero'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\git hub projects\cloud\run_tests.py", line 59, in run_tests
    result = runner.run(test_suite)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\runner.py", line 72, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 84, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 122, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 84, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\suite.py", line 122, in run
    test(result)
    ~~~~^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 707, in __call__
    return self.run(*args, **kwds)
           ~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 650, in run
    with outcome.testPartExecutor(self):
         ~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^
  File "C:\Python313\Lib\contextlib.py", line 162, in __exit__
    self.gen.throw(value)
    ~~~~~~~~~~~~~~^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 75, in testPartExecutor
    _addError(self.result, test_case, exc_info)
    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\case.py", line 98, in _addError
    result.addFailure(test, exc_info)
    ~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\unittest\result.py", line 17, in inner
    return method(self, *args, **kw)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 205, in addFailure
    testinfo = self.infoclass(self, test, self.infoclass.FAILURE, err)
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 90, in __init__
    else self.test_result._exc_info_to_string(
         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        self.err, test_method))
        ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\omarw\AppData\Roaming\Python\Python313\site-packages\HtmlTestRunner\result.py", line 425, in _exc_info_to_string
    length = self._count_relevant_tb_levels(tb)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'HtmlTestResult' object has no attribute '_count_relevant_tb_levels'. Did you mean: '_is_relevant_tb_level'?

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Python313\Lib\unittest\mock.py", line 1424, in patched
    return func(*newargs, **newkeywargs)
  File "D:\git hub projects\cloud\test_docker_manager.py", line 234, in test_stop_container
    self.assertIn(f"Container {container_id} stopped successfully", message)
    ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 'Container 123456 stopped successfully' not found in 'Successfully stopped container: 123456'

----------------------------------------------------------------------
Ran 41 tests in 0.540s

FAILED (failures=8, errors=19)


==================================================
TEST SUMMARY
==================================================
Total tests: 41
Passed: 14
Failed: 8
Errors: 19
